<?php

class ApiLoads extends BaseController {


	public function __construct() {
		date_default_timezone_set('Asia/Manila');
	}

	/**
	* Generate Load Code
	*
	* @example  www.example.com/api/{version}/boxes/create/load
	*
	* @return load code
	*/
	public function generateLoadCode()
	{
		try {
			DB::beginTransaction();

			$loadMax =  Load::select(DB::raw('max(id) as max_created, max(load_code) as load_code'))->first()->toArray();

			if($loadMax['max_created'] === null) {
				$loadCode = 'LD0000001';
			} else {
				$loadCode = substr($loadMax['load_code'], -7);
				$loadCode = (int) $loadCode + 1;
				$loadCode = 'LD' . sprintf("%07s", (int)$loadCode);
			}

			Load::create(array('load_code'	=> $loadCode));

			self::generateLoadCodeAuditTrail($loadCode);

			DB::commit();
			return CommonHelper::return_success_message($loadCode);
		} catch (Exception $e) {
			DB::rollback();
			return CommonHelper::return_fail($e->getMessage());
		}
	}

	/**
	* Audit trail for generating load code
	*
	* @example  self::generateLoadCodeAuditTrail()
	*
	* @param  $loadCodeload code
	* @return void
	*/
	private function generateLoadCodeAuditTrail($loadCode)
	{
		$user_id = Authorizer::getResourceOwnerId();
		$userInfo = User::find($user_id);
		$data_after = 'Load code # '.$loadCode . ' generated by ' . $userInfo->username;
		$arrParams = array(
			'module'		=> Config::get("audit_trail_modules.picking"),
			'action'		=> Config::get("audit_trail.generate_load_code"),
			'reference'		=> 'Load code # ' . $loadCode,
			'data_before'	=> '',
			'data_after'	=> $data_after,
			'user_id'		=> $user_id,
			'created_at'	=> date('Y-m-d H:i:s'),
			'updated_at'	=> date('Y-m-d H:i:s')
		);
		AuditTrail::addAuditTrail($arrParams);
	}

	public function getList() {
		try {
			$loads = Load::getLoads();

			return CommonHelper::return_success_message($loads);
		} catch (Exception $e) {
			return CommonHelper::return_fail($e->getMessage());
		}
	}

	public function loadBoxes()
	{
		try {

			CommonHelper::setRequiredFields(array('data', 'load_code'));

			$boxLists = json_decode(Request::get('data'));
			$loadCode = Request::get('load_code');

			DB::beginTransaction();

			// print_r($boxLists); die();
			foreach ($boxLists as $boxCode)
			{
				$boxCode = $boxCode->box_code;
				//get boxes info
				$boxInfo = Box::getBoxList($boxCode);
				if(empty($boxInfo)) throw new Exception("Box code does not exist");
				$soNos = array_unique(explode(',', $boxInfo['so_no'])); //remove duplicate so_no
				StoreOrder::updateLoadCode($soNos, $loadCode);

				$pallete = Pallet::getOrCreatePallete($boxInfo['store_code'], $loadCode);
				Log::info(__METHOD__ .' dump pallet: '.print_r($pallete,true));
				PalletDetails::create(array(
					'box_code' 		=> $boxCode,
					'pallet_code'	=> $pallete['pallet_code']
					));
				Log::info(__METHOD__ .' dump PalletDetails: '.print_r(array('box_code'=> $boxCode,'pallet_code'=> $pallete['pallet_code']),true));

				$useBox = Box::updateBox(array(
					"box_code"	=> $boxInfo['box_code'],
					"store"		=> $boxInfo['store_code'],
					"in_use"	=> Config::get('box_statuses.in_use')
					));
				Log::info(__METHOD__ . 'dump boxInfo: ' .print_r($boxInfo, true));
				self::createJdaTransaction($boxInfo);
			}
			self::loadBoxesAuditTrail(Request::get('data'), $loadCode);
			DB::commit();


			return CommonHelper::return_success();
		} catch (Exception $e) {
			DB::rollback();
			Log::error(__METHOD__ .$e->getMessage());
			return CommonHelper::return_fail($e->getMessage());
		}
	}

	/**
	* Audit trail for picklist loading
	*
	* @example  self::loadBoxesAuditTrail()
	*
	* @param  $boxCodes 	box codes
	* @param  $loadCode 		load code
	* @return void
	*/
	private function loadBoxesAuditTrail($boxCodes, $loadCode)
	{
		$boxCodes = json_decode($boxCodes, true);

		$newArray = array();
		foreach ($boxCodes as $value) {
			$newArray[] = implode(',', $value);
		}

		$boxCodes = implode(',', $newArray);

		$user_id = Authorizer::getResourceOwnerId();
		$userInfo = User::find($user_id);
		$data_after = 'Box code # '.$boxCodes . '  loaded to Load # ' . $loadCode .' by '. $userInfo->username;
		$arrParams = array(
			'module'		=> Config::get("audit_trail_modules.boxing"),
			'action'		=> Config::get("audit_trail.box_load"),
			'reference'		=> 'Box code # ' . $boxCodes,
			'data_before'	=> '',
			'data_after'	=> $data_after,
			'user_id'		=> $user_id,
			'created_at'	=> date('Y-m-d H:i:s'),
			'updated_at'	=> date('Y-m-d H:i:s')
		);
		AuditTrail::addAuditTrail($arrParams);
	}

	protected function createJdaTransaction($data)
	{
		Log::info(__METHOD__ .' dump: '.print_r($data,true));
		$getUniqueBox = BoxDetails::getUniqueBoxPerDocNo($data['move_doc_number']);
		// Log::info(__METHOD__ .' dump: '.print_r($getUniqueBox,true));
		$boxParams = array(
			'module' 		=> Config::get('transactions.module_box'),
			'jda_action'	=> Config::get('transactions.jda_action_box'),
			'reference'		=> $getUniqueBox['box_code']
		);
		//create jda transaction for box header
		Log::info(__METHOD__ .' dump boxParams: '.print_r($boxParams,true));
		$boxResp = JdaTransaction::insert($boxParams);

		if(is_array($getUniqueBox)) {

			$getPallet = PalletDetails::getPallet($getUniqueBox['box_code']);
			Log::info(__METHOD__ .' dump getPallet: '. $getUniqueBox['box_code'] . ' ' .print_r($getPallet,true));

			if(is_array($getPallet)) {
				$palletParams = array(
					'module' 		=> Config::get('transactions.module_pallet'),
					'jda_action'	=> Config::get('transactions.jda_action_pallet'),
					'reference'		=> $getPallet['pallet_code']
				);
				//create jda transaction for pallet header
				$palletResp = JdaTransaction::insert($palletParams);

				$getLoad = LoadDetails::getLoad($getPallet['pallet_code']);
				$loadParams = array(
					'module' 		=> Config::get('transactions.module_load'),
					'jda_action'	=> Config::get('transactions.jda_action_load'),
					'reference'		=> $getLoad['load_code']
				);
				//create jda transaction for load header
				$loadResp = JdaTransaction::insert($loadParams);

				$palletizeBoxParams = array(
					'module' 		=> Config::get('transactions.module_palletize_box'),
					'jda_action'	=> Config::get('transactions.jda_action_palletize_box'),
					'reference'		=> $getPallet['pallet_code']
				);
				//create jda transaction for pallete to box
				$palletBoxResp = JdaTransaction::insert($palletizeBoxParams);


				$loadingParams = array(
					'module' 		=> Config::get('transactions.module_loading'),
					'jda_action'	=> Config::get('transactions.jda_action_loading'),
					'reference'		=> $getLoad['load_code']
				);
				//create jda transaction for loading
				$insertLoad 		= JdaTransaction::insert($loadingParams);

				$docNo 				= $data['move_doc_number'];
				$boxNo 				= $getUniqueBox['box_code'];
				$palletNo 			= $getPallet['pallet_code'];
				$loadNo 			= $getLoad['load_code'];

			}
		}
	}
}